

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_300 = Integer(300); _sage_const_1j = ComplexNumber(0, '1'); _sage_const_10 = Integer(10); _sage_const_8 = Integer(8); _sage_const_111 = Integer(111); _sage_const_0p9 = RealNumber('0.9'); _sage_const_0p5 = RealNumber('0.5')# Import necessary libraries
import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D

# Define the function
def f(z):
    return z**_sage_const_2  - _sage_const_1   # Note the use of `**` for exponentiation in Python

# Create a grid of x and y values
x_min, x_max = -_sage_const_2 , _sage_const_2 
y_min, y_max = -_sage_const_2 , _sage_const_2 
resolution = _sage_const_300 
x = np.linspace(x_min, x_max, resolution)
y = np.linspace(y_min, y_max, resolution)
xx, yy = np.meshgrid(x, y)
zz = xx + _sage_const_1j  * yy  # Combine x and y into complex numbers
fz_real = f(zz).real  # Compute only the real part of f(z)

# Create a 3D plot
fig = plt.figure(figsize=(_sage_const_10 , _sage_const_8 ))
ax = fig.add_subplot(_sage_const_111 , projection='3d')

# Plot the surface
surf = ax.plot_surface(xx, yy, fz_real, cmap='viridis', edgecolor='k', alpha=_sage_const_0p9 )

# Add color bar
fig.colorbar(surf, ax=ax, shrink=_sage_const_0p5 , aspect=_sage_const_10 , label="Re(f(z))")

# Set labels and title
ax.set_xlabel("Re(z)")
ax.set_ylabel("Im(z)")
ax.set_zlabel("Re(f(z))")
ax.set_title("3D Plot of the Real Part of $f(z) = z^2 - 1$")

# Show the plot
plt.show()


